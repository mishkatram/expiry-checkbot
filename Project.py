import telebot
import sqlite3
import html
import threading
from dateutil.relativedelta import relativedelta
from time import sleep
from datetime import datetime, timedelta, date
from telebot import types
from Config import TOKEN

bot = telebot.TeleBot(TOKEN)
conn = sqlite3.connect('Project.sql')
cur = conn.cursor()
cur.execute('CREATE TABLE IF NOT EXISTS table_1 (id integer primary key autoincrement not null, tg_id int, '
            'crutch text, product text, finish_time text, finish_date text)')
conn.commit()
cur.close()
conn.close()
add_dict = {}


@bot.message_handler(commands=['start'])
def start(message):
    time = datetime.now()
    hour = time.hour
    first_name = message.from_user.first_name
    last_name = message.from_user.last_name
    if hour < 5:
        bot.send_message(message.chat.id, f'–î–æ–±—Ä–æ–π –Ω–æ—á–∏, {first_name} {last_name}!')
    elif hour < 12:
        bot.send_message(message.chat.id, f'–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ, {first_name} {last_name}!')
    elif hour < 17:
        bot.send_message(message.chat.id, f'–î–æ–±—Ä—ã–π –¥–µ–Ω—å, {first_name} {last_name}!')
    else:
        bot.send_message(message.chat.id, f'–î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä, {first_name} {last_name}!')
    start_main_menu(message)


@bot.message_handler(commands=['list'])
def start_main_menu(message):
    parts = message.text.strip().split()
    if len(parts) > 1 and parts[1].isdigit():
        page = int(parts[1]) - 1
    else:
        page = 0
    main_menu(message, page)


def main_menu(message, page):
    emoji_dict = {1: "1Ô∏è‚É£", 2: "2Ô∏è‚É£", 3: "3Ô∏è‚É£", 4: "4Ô∏è‚É£", 5: "5Ô∏è‚É£", 6: "6Ô∏è‚É£", 7: "7Ô∏è‚É£", 8: "8Ô∏è‚É£", 9: "9Ô∏è‚É£", 10: "üîü"}
    tgID = int(message.chat.id)
    conn = sqlite3.connect('Project.sql')
    cur = conn.cursor()
    cur.execute("SELECT * FROM table_1 WHERE tg_id = ? ORDER BY finish_date ASC, finish_time ASC", (tgID,))
    row = cur.fetchall()
    conn.commit()
    cur.close()
    buttons = []
    comment = ""
    if page > (len(row) - 1) // 10:
        comment = f"\n–í—ã –≤–≤–µ–ª–∏ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É! –í—ã –ø–µ—Ä–µ–≤–µ–¥–µ–Ω—ã –Ω–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Å—Ç—Ä–∞–Ω—Ü–∏—É"
        page = (len(row) - 1) // 10
    info = f"<b>–°–ø–∏—Å–æ–∫ –í–∞—à–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤: {comment}</b>\n(–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1} –∏–∑ {(len(row) + 9) // 10})\n======\n"
    exp, void = False, False
    if not row:
        info = "<b>–£ –≤–∞—Å –Ω–µ—Ç –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤!</b>\n–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ ‚¨áÔ∏è"
        void = True
    else:
        for i in range(page * 10, min((page + 1) * 10, len(row))):
            date_obj = datetime.strptime(f"{row[i][5]} {row[i][4]}", "%Y-%m-%d %H:%M")
            formatted_date = date_obj.strftime("%d.%m.%Y %H:%M")
            now = datetime.now().replace(second=0, microsecond=0)
            expired = ""
            buttons.append(types.InlineKeyboardButton(emoji_dict[i % 10 + 1], callback_data=f"more#{page}*{row[i][0]}"))
            if date_obj < now:
                expired = "–ü–†–û–°–†–û–ß–ï–ù‚ÄºÔ∏è\n"
                exp = True
            info += f'{emoji_dict[i % 10 + 1]} –¢–æ–≤–∞—Ä: {html.escape(row[i][3])}.\n' \
                    f'–ì–æ–¥–µ–Ω –¥–æ: {formatted_date}\n{expired}-----\n'
        info += '‚ÑπÔ∏è –í—Å–µ–≥–¥–∞ –º–æ–∂–Ω–æ –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ –Ω—É–∂–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É, –≤–≤–µ–¥—è "/list &lt;i&gt;",' \
                ' –≥–¥–µ i - –Ω–æ–º–µ—Ä –Ω—É–∂–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã'
    markup = types.InlineKeyboardMarkup(row_width=5)
    markup.add(*buttons)
    nav_buttons = []
    if (len(row) - 1) // 10 != 0 and not void:
        if page > 0:
            nav_buttons.append(types.InlineKeyboardButton("‚è™", callback_data=f"page#{page - 1}"))
        else:
            nav_buttons.append(types.InlineKeyboardButton("„Ö§", callback_data="no_act"))
        nav_buttons.append(types.InlineKeyboardButton(f"{page + 1} –∏–∑ {(len(row) + 9) // 10}", callback_data="no_act"))
        if page < (len(row) - 1) // 10:
            nav_buttons.append(types.InlineKeyboardButton("‚è©", callback_data=f"page#{page + 1}"))
        else:
            nav_buttons.append(types.InlineKeyboardButton("„Ö§", callback_data="no_act"))
    markup.add(*nav_buttons)
    markup.add(types.InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä", callback_data="add#add"))
    if exp:
        markup.add(types.InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã", callback_data=f"del_exp_chek#{page}"))
    bot.send_message(message.chat.id, info, reply_markup=markup, parse_mode="HTML")


def more_menu(message, id, page):
    conn = sqlite3.connect('Project.sql')
    cur = conn.cursor()
    cur.execute("SELECT * FROM table_1 WHERE id = ?", (id,))
    row = cur.fetchall()
    conn.commit()
    cur.close()
    nm = row[0][3]
    markup = types.InlineKeyboardMarkup()
    btn1 = types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"page#{page}")
    btn2 = types.InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"del_chek#{page}*{id}")
    btn3 = types.InlineKeyboardButton("üìù –ü–µ—Ä–µ–∏–º.", callback_data=f"rename#{page}*{id}")
    markup.row(btn1, btn2, btn3)
    bot.send_message(message.chat.id, f"<b>–¢–æ–≤–∞—Ä: {html.escape(nm)}</b>\n"
                                      f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup, parse_mode="HTML")


def add(message):
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("‚Ü™Ô∏è –û—Ç–º–µ–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ", callback_data=f"cancel# "))
    item_card = {}
    bot.send_message(message.chat.id, '–ù–∞—á–∏–Ω–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞. \n\n‚ö†Ô∏è–¢–æ–≤–∞—Ä —Å—á–∏—Ç–∞–µ—Ç—Å—è –≤—Å–∫—Ä—ã—Ç—ã–º –ø—Ä–∏ –µ–≥–æ '
                                      '—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö‚ö†Ô∏è. \n\n–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞.\n(‚ö†Ô∏è–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, '
                                      '–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–∏–º–≤–æ–ª "#"‚ö†Ô∏è)', reply_markup=markup)
    bot.register_next_step_handler(message, add2, item_card)


def add2(message, item_card):
    if message.text is None:
        bot.send_message(message.chat.id, '‚ö†Ô∏è –í—ã –Ω–µ –≤–≤–µ–ª–∏ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ ‚Äî –æ–ø–µ—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞!')
        return start_main_menu(message)
    name = message.text.strip()
    if "#" in name:
        bot.send_message(message.chat.id, '‚ö†Ô∏è –í –Ω–∞–∑–≤–∞–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–∏–º–≤–æ–ª "#".')
        return start_main_menu(message)
    if len(name) > 200:
        bot.send_message(message.chat.id, '‚ö†Ô∏è –í –Ω–∞–∑–≤–∞–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞ –±—ã–ª–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω–æ –±–æ–ª–µ–µ 200 —Å–∏–º–≤–æ–ª–æ–≤.')
        return start_main_menu(message)
    item_card['name'] = name
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("‚Ü™Ô∏è –û—Ç–º–µ–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ", callback_data=f"cancel# "))
    bot.send_message(message.chat.id, '–ê —Ç–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ —Å—Ä–æ–∫ –≥–æ–¥–Ω–æ—Å—Ç–∏ (–¥–µ–Ω—å, –¥–æ –∫–æ—Ç–æ—Ä–æ–≥–æ –µ–≥–æ –Ω–∞–¥–æ '
                                      '—É–ø–æ—Ç—Ä–µ–±–∏—Ç—å).\n–§–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞: \"–î–î.–ú–ú.–ì–ì–ì–ì\"', reply_markup=markup)
    bot.register_next_step_handler(message, add3, item_card)


def add3(message, item_card):
    global add_dict
    tgID = message.from_user.id
    if message.text is None:
        bot.send_message(message.chat.id, '‚ö†Ô∏è –í—ã –Ω–µ –≤–≤–µ–ª–∏ –¥–∞—Ç—É ‚Äî –æ–ø–µ—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞!')
        return start_main_menu(message)
    fDate = message.text.strip()
    if Try(fDate):
        fDate = datetime.strptime(f"{fDate}", "%d.%m.%Y").date()
    else:
        bot.send_message(message.chat.id, '‚ö†Ô∏è –¢–∞–∫–∞—è –¥–∞—Ç–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!')
        return start_main_menu(message)
    if fDate <= date.today():
        bot.send_message(message.chat.id, '‚ö†Ô∏è –í–≤–µ–¥–µ–Ω–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞, —Ç. –∫. –≤ —ç—Ç–æ–º —Å–ª—É—á–∞–µ —Ç–æ–≤–∞—Ä –ø—Ä–æ—Å—Ä–æ—á–µ–Ω.')
        return start_main_menu(message)
    print(123)
    item_card['fDate'] = fDate
    if f"{tgID}" in add_dict:
        del add_dict[f"{tgID}"]
    add_dict[f'{tgID}'] = item_card
    bot.send_message(message.chat.id, '–¢–µ–ø–µ—Ä—å –Ω–∞–¥–æ –≤–≤–µ—Å—Ç–∏ —Å—Ä–æ–∫ —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –≤ –æ—Ç–∫—Ä—ã—Ç–æ–º –≤–∏–¥–µ.')
    markup = types.InlineKeyboardMarkup()
    btn1 = types.InlineKeyboardButton('–ß–∞—Å—ã', callback_data=f"add#h")
    btn2 = types.InlineKeyboardButton('–î–Ω–∏', callback_data=f"add#d")
    btn3 = types.InlineKeyboardButton('–ú–µ—Å—è—Ü—ã', callback_data=f"add#m")
    markup.row(btn1, btn2, btn3)
    markup.add(types.InlineKeyboardButton("‚Ü™Ô∏è –û—Ç–º–µ–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ", callback_data=f"cancel# "))
    bot.send_message(message.chat.id, '–î–ª—è —ç—Ç–æ–≥–æ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç–∏ '
                                      '(–∫–æ–ª-–≤–æ —á–∞—Å–æ–≤/–¥–Ω–µ–π/–º–µ—Å—è—Ü–µ–≤)', reply_markup=markup)
    add_dict[str(tgID)] = item_card
    add_dict[str(tgID)]["awaiting_dimension"] = True


def add_4(message, dim):
    global add_dict
    fn_tm = "00:00"
    tgID = message.from_user.id
    if message.text is None:
        bot.send_message(message.chat.id, '‚ö†Ô∏è –í—ã –Ω–µ –≤–≤–µ–ª–∏ —Å—Ä–æ–∫ —Ö—Ä–∞–Ω–µ–Ω–∏—è ‚Äî –æ–ø–µ—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞!')
        return start_main_menu(message)
    fTime = str(message.text.strip())
    if not fTime.isdigit():
        bot.send_message(message.chat.id, "‚ö†Ô∏è –í—ã –≤–≤–µ–ª–∏ –∫–∞–∫—É—é-—Ç–æ —Å—Ç—Ä–∞–Ω–Ω—É—é –∞–±—Ä–∞–∫–∞–¥–∞–±—Ä—É ‚Äî –æ–ø–µ—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞!")
        return start_main_menu(message)
    if dim == "h":
        fTime = datetime.now() + timedelta(hours=int(fTime))
    elif dim == "d":
        fTime = datetime.now() + timedelta(days=int(fTime))
    elif dim == "m":
        fTime = datetime.now() + relativedelta(month=int(fTime))
    dt_us_dict = add_dict[f"{tgID}"]
    fDate = dt_us_dict["fDate"]
    name = dt_us_dict["name"]
    if fDate > fTime.date():
        fDate = fTime.date()
        fn_tm = str(fTime.strftime("%H:%M"))
    if fDate == date.today():
        bot.send_message(message.chat.id, f"‚ö†Ô∏è –°—Ä–æ–∫ –≥–æ–¥–Ω–æ—Å—Ç–∏ —ç—Ç–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –∏—Å—Ç–µ–∫–∞–µ—Ç —Å–µ–≥–æ–¥–Ω—è –≤ {fn_tm}‚ö†Ô∏è")
    conn = sqlite3.connect('Project.sql')
    cur = conn.cursor()
    cur.execute("INSERT INTO table_1 (tg_id, product, finish_time, finish_date) VALUES (?, ?, ?, ?)",
                (tgID, name, fn_tm, fDate))
    bot.send_message(message.chat.id, '‚úÖ –î–æ–±–∞–≤–∏–ª!')
    conn.commit()
    cur.close()
    start_main_menu(message)


def rename(message, product_id, old_naim):
    if message.text is None:
        return start_main_menu(message)
    new_name = message.text.strip()
    if "#" in new_name:
        bot.send_message(message.chat.id, '‚ö†Ô∏è –í –Ω–∞–∑–≤–∞–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–∏–º–≤–æ–ª "#".')
        return start_main_menu(message)
    conn = sqlite3.connect('Project.sql')
    cur = conn.cursor()
    cur.execute("UPDATE table_1 SET product = ? WHERE id = ?", (new_name, product_id))
    conn.commit()
    bot.send_message(message.chat.id, f'‚úÖ –¢–æ–≤–∞—Ä "{html.escape(old_naim[:27])}..." <b>—É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω</b>'
                                      f' –≤ "{html.escape(new_name)}".', parse_mode="HTML")
    cur.close()
    conn.close()
    start_main_menu(message)


def delete(message, ID):
    conn = sqlite3.connect('Project.sql')
    cur = conn.cursor()
    cur.execute("DELETE FROM table_1 WHERE id = ?", (ID,))
    bot.send_message(message.chat.id, '‚úÖ –£–¥–∞–ª–µ–Ω–æ!')
    conn.commit()
    cur.close()
    start_main_menu(message)


def delete_expired(message):
    tgID = message.chat.id
    print(tgID)
    conn = sqlite3.connect('Project.sql')
    cur = conn.cursor()
    now = datetime.now()
    current_date = now.strftime('%Y-%m-%d')
    current_time = now.strftime('%H:%M')
    cur.execute("DELETE FROM table_1 WHERE tg_id = ? AND (finish_date < ? OR (finish_date = ? AND "
                "finish_time < ?))", (tgID, current_date, current_date, current_time))
    conn.commit()
    cur.close()
    bot.send_message(message.chat.id, '‚úÖ –£–¥–∞–ª–µ–Ω–æ!')
    start_main_menu(message)


@bot.callback_query_handler(func=lambda callback: True)
def callback_message(callback):
    callback_data, other = str(callback.data).split("#")
    if callback_data == "add":
        if other == "add":
            add(callback.message)
            return
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("‚Ü™Ô∏è –û—Ç–º–µ–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ", callback_data=f"cancel# "))
        bot.send_message(callback.message.chat.id, "–ê —Ç–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ", reply_markup=markup)
        bot.register_next_step_handler(callback.message, add_4, other)
    if callback_data == "info" or callback_data == "delete":
        pass
    if callback_data == "del":
        delete(callback.message, other)
        print(other)
    if callback_data == "page":
        main_menu(callback.message, int(other))
    if callback_data == "more":
        page, id = other.split("*")
        more_menu(callback.message, int(id), int(page))
    if callback_data == "del_chek":
        page, id = other.split("*")
        bot.answer_callback_query(callback.id)
        markup = types.InlineKeyboardMarkup()
        conn = sqlite3.connect('Project.sql')
        cur = conn.cursor()
        cur.execute("SELECT * FROM table_1 WHERE id = ?", (id,))
        row = cur.fetchall()
        conn.commit()
        cur.close()
        btn1 = types.InlineKeyboardButton("‚úÖ –î–∞", callback_data=f"del#{id}")
        btn2 = types.InlineKeyboardButton("‚ùå –ù–µ—Ç", callback_data=f"more#{page}*{id}")
        markup.row(btn1, btn2)
        bot.send_message(callback.message.chat.id, f"–í—ã —É–≤–µ—Ä–µ–Ω–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å {row[0][3]}?", reply_markup=markup)
    if callback_data == "del_exp_chek":
        bot.answer_callback_query(callback.id)
        markup = types.InlineKeyboardMarkup()
        btn1 = types.InlineKeyboardButton("‚úÖ –î–∞", callback_data="del_exp# ")
        btn2 = types.InlineKeyboardButton("‚ùå –ù–µ—Ç", callback_data=f"page#{other}")
        markup.row(btn1, btn2)
        bot.send_message(callback.message.chat.id, f"–í—ã —É–≤–µ—Ä–µ–Ω–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å <b>–í–°–ï</b> "
                                                   f"–ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã?", reply_markup=markup, parse_mode="HTML")
    if callback_data == "del_exp":
        delete_expired(callback.message)
    if callback_data == "cancel":
        start_main_menu(callback.message)
    if callback_data == "rename":
        page, id = other.split("*")
        bot.answer_callback_query(callback.id)
        conn = sqlite3.connect('Project.sql')
        cur = conn.cursor()
        cur.execute("SELECT * FROM table_1 WHERE id = ?", (id,))
        row = cur.fetchall()
        conn.commit()
        cur.close()
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("‚Ü™Ô∏è –û—Ç–º–µ–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ", callback_data=f"more#{page}*{id}"))
        bot.send_message(callback.message.chat.id, f'–ü–µ—Ä–µ–∏–º–µ–Ω–Ω–æ–≤—ã–≤–∞–µ–º —Ç–æ–≤–∞—Ä {row[0][3]}\n–î–ª—è —ç—Ç–æ–≥–æ –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ '
                                                   f'–Ω–∞–∑–≤–∞–Ω–∏–µ\n(‚ö†Ô∏è–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–∏–º–≤–æ–ª '
                                                   f'"#"‚ö†Ô∏è)', reply_markup=markup)
        bot.register_next_step_handler(callback.message, rename, id, row[0][3])


def is_awaiting_dimension(message):
    user_id = str(message.from_user.id)
    return user_id in add_dict and add_dict[user_id].get("awaiting_dimension")


@bot.message_handler(func=is_awaiting_dimension)
def reject_text_input(message):
    bot.send_message(message.chat.id, "‚ö†Ô∏è –°–µ–π—á–∞—Å –Ω—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å —Å—Ä–æ–∫–∞ —Ö—Ä–∞–Ω–µ–Ω–∏—è, "
                                      "–∞ –Ω–µ –ø–∏—Å–∞—Ç—å —Ç–µ–∫—Å—Ç.\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –≤—ã—à–µ ‚¨ÜÔ∏è")


def notify_users_about_today_expirations():
    today = date.today()
    conn = sqlite3.connect('Project.sql')
    cur = conn.cursor()
    cur.execute("SELECT product, tg_id, finish_time FROM table_1 WHERE finish_date"
                " = ? ORDER BY finish_date ASC, finish_time ASC", (str(today),))
    rows = cur.fetchall()
    user_messages = {}
    for product, tg_id, finish_time in rows:
        if tg_id not in user_messages:
            user_messages[tg_id] = "‚ÄºÔ∏è<b>–°–µ–≥–æ–¥–Ω—è –∏—Å—Ç–µ–∫–∞–µ—Ç —Å—Ä–æ–∫ –≥–æ–¥–Ω–æ—Å—Ç–∏ —É —ç—Ç–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤:</b>\n"
        user_messages[tg_id] += f"‚óè <b>{html.escape(product)}</b> ‚Äî —Å—Ä–æ–∫ –≥–æ–¥–Ω–æ—Å—Ç–∏ –∏—Å—Ç–µ—á—ë—Ç –≤ <b>{finish_time}</b>\n"
    for tg_id, msg in user_messages.items():
        msg += "‚ÑπÔ∏è –î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º –≤–≤–µ–¥–∏—Ç–µ /list"
        bot.send_message(int(tg_id), msg, parse_mode="HTML")
    cur.close()
    conn.close()


def midnight_notifier():
    while True:
        now = datetime.now()
        if now.hour == 0 and now.minute == 0:
            notify_users_about_today_expirations()
            sleep(61)
        else:
            sleep(55)


def Try(Date):
    try:
        datetime.strptime(f"{Date}", "%d.%m.%Y").date()
        return True
    except ValueError:
        return False


threading.Thread(target=midnight_notifier, daemon=True).start()
while True:
    try:
        bot.polling(none_stop=True)
    except Exception as _ex:
        print(_ex)
        sleep(5)
